import requests
from zipfile import ZipFile, ZIP_DEFLATED
import io
import mimetypes
from urllib.parse import urlparse, unquote
import os
import hashlib

class DownloadMalware:
    def __init__(self, url, output_zip_path, zip_password):
        self.url = url
        self.output_zip_path = output_zip_path
        self.zip_password = zip_password

    def extract_filename_and_extension(self):
        parsed_url = urlparse(self.url)
        unquoted_path = unquote(parsed_url.path)
        filename = os.path.basename(unquoted_path)
        name, extension = os.path.splitext(filename)
        return filename, extension

    def get_sha256_of_remote_file(self):
        try:
            response = requests.get(self.url, stream=True)
            response.raise_for_status()

            sha256_hash = hashlib.sha256()
            for chunk in response.iter_content(chunk_size=8192):
                sha256_hash.update(chunk)

            return sha256_hash.hexdigest()
        except requests.RequestException as e:
            print(f"Error downloading the file: {e}")
            return None

    def download_apk_to_zip(self):
        # First, get the SHA-256 hash of the file
        hash_value = self.get_sha256_of_remote_file()
        if hash_value:
            print(f"SHA-256 hash of the file: {hash_value}")
        else:
            return

        # Extract the filename from the URL
        filename, _ = self.extract_filename_and_extension()

        # Guess MIME type based on URL (extension)
        mime_type, _ = mimetypes.guess_type(self.url)

        # Request to download the APK
        response = requests.get(self.url)
        response.raise_for_status()

        # If MIME type is None, use Content-Type from response headers
        if mime_type is None:
            mime_type = response.headers.get('Content-Type', 'unknown')
        print("Determined MIME type:", mime_type)

        # Create a byte stream to hold the data
        zip_buffer = io.BytesIO()

        # Create a zip file in memory
        with ZipFile(zip_buffer, 'w', ZIP_DEFLATED) as zip_file:
            zip_file.writestr(filename, response.content)
            zip_file.setpassword(bytes(self.zip_password, 'utf-8'))

        # Write the zip file to disk
        with open(self.output_zip_path, "wb") as f:
            f.write(zip_buffer.getvalue())

# Usage
url = ""
output_zip_path = "sample.zip"
zip_password = "infected"
downloader = DownloadMalware(url, output_zip_path, zip_password)
downloader.download_apk_to_zip()
